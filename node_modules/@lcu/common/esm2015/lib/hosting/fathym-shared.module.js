import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LCUInterceptor } from '../api/daf/lcu.interceptor';
import { RealTimeService } from '../api/real-time/real-time.service';
import { LCUServiceSettings, } from '../api/lcu-service-settings';
import { SafePipe } from '../pipes/safe-pipe';
export const winAny = window;
export class FathymSharedModule {
    //  Fields
    //  API Methods
    static DefaultServiceSettings(env, apiRoot) {
        const lcuSvcSettings = winAny.LCU;
        lcuSvcSettings.APIRoot = lcuSvcSettings.APIRoot || apiRoot || '';
        lcuSvcSettings.Application =
            lcuSvcSettings.Application || {};
        lcuSvcSettings.Application.EnterpriseLookup =
            lcuSvcSettings.Application.EnterpriseLookup || 'test-app';
        lcuSvcSettings.Application.ID = lcuSvcSettings.Application.ID || 'test-app';
        lcuSvcSettings.State = lcuSvcSettings.State || {};
        lcuSvcSettings.Settings = lcuSvcSettings.Settings || {};
        return lcuSvcSettings;
        // return <LCUServiceSettings>{
        //   APIRoot: winAny.LCU && winAny.LCU.APIRoot ? winAny.LCU.APIRoot : '',
        //   Application: {
        //     ID: winAny.LCU && winAny.LCU.Application && winAny.LCU.Application.ID ? winAny.LCU.Application.ID : 'test-app',
        //     EnterpriseLookup:
        //       winAny.LCU && winAny.LCU.Application.EnterpriseLookup ? winAny.LCU.Application.EnterpriseLookup : 'test-app'
        //   },
        //   State: {
        //     Environment:winAny.LCU.State.Environment : '',
        //     ActionRoot: winAny.LCU.State ? winAny.LCU.State.Root : '',
        //     Root: winAny.LCU.State ? winAny.LCU.State.Root : '',
        //     UsernameMock: winAny.LCU.State ? winAny.LCU.State.UsernameMock : ''
        //   },
        //   Settings: winAny.LCU.Settings
        // };
    }
    static forRoot() {
        return {
            ngModule: FathymSharedModule,
            providers: [
                RealTimeService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: LCUInterceptor,
                    multi: true,
                    deps: [LCUServiceSettings],
                },
            ],
        };
    }
}
FathymSharedModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SafePipe],
                imports: [CommonModule, FormsModule, HttpClientModule, RouterModule],
                exports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    RouterModule,
                    SafePipe,
                ],
                providers: [],
                entryComponents: [],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF0aHltLXNoYXJlZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9ob3N0aW5nL2ZhdGh5bS1zaGFyZWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JFLE9BQU8sRUFFTCxrQkFBa0IsR0FHbkIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQztBQWVsQyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFVBQVU7SUFFVixlQUFlO0lBQ2YsTUFBTSxDQUFDLHNCQUFzQixDQUMzQixHQUE0QixFQUM1QixPQUFnQjtRQUVoQixNQUFNLGNBQWMsR0FBdUIsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUV0RCxjQUFjLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLElBQUksT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUVqRSxjQUFjLENBQUMsV0FBVztZQUN4QixjQUFjLENBQUMsV0FBVyxJQUEwQixFQUFHLENBQUM7UUFFMUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0I7WUFDekMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxVQUFVLENBQUM7UUFFNUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksVUFBVSxDQUFDO1FBRTVFLGNBQWMsQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssSUFBb0IsRUFBRyxDQUFDO1FBRW5FLGNBQWMsQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLFFBQVEsSUFBdUIsRUFBRyxDQUFDO1FBRTVFLE9BQU8sY0FBYyxDQUFDO1FBRXRCLCtCQUErQjtRQUMvQix5RUFBeUU7UUFDekUsbUJBQW1CO1FBQ25CLHNIQUFzSDtRQUN0SCx3QkFBd0I7UUFDeEIscUhBQXFIO1FBQ3JILE9BQU87UUFDUCxhQUFhO1FBQ2IscURBQXFEO1FBQ3JELGlFQUFpRTtRQUNqRSwyREFBMkQ7UUFDM0QsMEVBQTBFO1FBQzFFLE9BQU87UUFDUCxrQ0FBa0M7UUFDbEMsS0FBSztJQUNQLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRTtnQkFDVCxlQUFlO2dCQUNmO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxjQUFjO29CQUN4QixLQUFLLEVBQUUsSUFBSTtvQkFDWCxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDM0I7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUFyRUYsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFDeEIsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLENBQUM7Z0JBQ3BFLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFdBQVc7b0JBQ1gsZ0JBQWdCO29CQUNoQixZQUFZO29CQUNaLFFBQVE7aUJBQ1Q7Z0JBQ0QsU0FBUyxFQUFFLEVBQUU7Z0JBQ2IsZUFBZSxFQUFFLEVBQUU7YUFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBMQ1VJbnRlcmNlcHRvciB9IGZyb20gJy4uL2FwaS9kYWYvbGN1LmludGVyY2VwdG9yJztcclxuaW1wb3J0IHsgUmVhbFRpbWVTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpL3JlYWwtdGltZS9yZWFsLXRpbWUuc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgTENVQXBwbGljYXRpb25Db25maWcsXHJcbiAgTENVU2VydmljZVNldHRpbmdzLFxyXG4gIExDVVNldHRpbmdzQ29uZmlnLFxyXG4gIExDVVN0YXRlQ29uZmlnLFxyXG59IGZyb20gJy4uL2FwaS9sY3Utc2VydmljZS1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IFNhZmVQaXBlIH0gZnJvbSAnLi4vcGlwZXMvc2FmZS1waXBlJztcclxuXHJcbmV4cG9ydCBjb25zdCB3aW5BbnkgPSA8YW55PndpbmRvdztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU2FmZVBpcGVdLFxyXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBIdHRwQ2xpZW50TW9kdWxlLCBSb3V0ZXJNb2R1bGVdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgSHR0cENsaWVudE1vZHVsZSxcclxuICAgIFJvdXRlck1vZHVsZSxcclxuICAgIFNhZmVQaXBlLFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmF0aHltU2hhcmVkTW9kdWxlIHtcclxuICAvLyAgRmllbGRzXHJcblxyXG4gIC8vICBBUEkgTWV0aG9kc1xyXG4gIHN0YXRpYyBEZWZhdWx0U2VydmljZVNldHRpbmdzKFxyXG4gICAgZW52OiB7IHByb2R1Y3Rpb246IGJvb2xlYW4gfSxcclxuICAgIGFwaVJvb3Q/OiBzdHJpbmdcclxuICApIHtcclxuICAgIGNvbnN0IGxjdVN2Y1NldHRpbmdzID0gPExDVVNlcnZpY2VTZXR0aW5ncz53aW5BbnkuTENVO1xyXG5cclxuICAgIGxjdVN2Y1NldHRpbmdzLkFQSVJvb3QgPSBsY3VTdmNTZXR0aW5ncy5BUElSb290IHx8IGFwaVJvb3QgfHwgJyc7XHJcblxyXG4gICAgbGN1U3ZjU2V0dGluZ3MuQXBwbGljYXRpb24gPVxyXG4gICAgICBsY3VTdmNTZXR0aW5ncy5BcHBsaWNhdGlvbiB8fCA8TENVQXBwbGljYXRpb25Db25maWc+eyB9O1xyXG5cclxuICAgIGxjdVN2Y1NldHRpbmdzLkFwcGxpY2F0aW9uLkVudGVycHJpc2VMb29rdXAgPVxyXG4gICAgICBsY3VTdmNTZXR0aW5ncy5BcHBsaWNhdGlvbi5FbnRlcnByaXNlTG9va3VwIHx8ICd0ZXN0LWFwcCc7XHJcblxyXG4gICAgbGN1U3ZjU2V0dGluZ3MuQXBwbGljYXRpb24uSUQgPSBsY3VTdmNTZXR0aW5ncy5BcHBsaWNhdGlvbi5JRCB8fCAndGVzdC1hcHAnO1xyXG5cclxuICAgIGxjdVN2Y1NldHRpbmdzLlN0YXRlID0gbGN1U3ZjU2V0dGluZ3MuU3RhdGUgfHwgPExDVVN0YXRlQ29uZmlnPnsgfTtcclxuXHJcbiAgICBsY3VTdmNTZXR0aW5ncy5TZXR0aW5ncyA9IGxjdVN2Y1NldHRpbmdzLlNldHRpbmdzIHx8IDxMQ1VTZXR0aW5nc0NvbmZpZz57IH07XHJcblxyXG4gICAgcmV0dXJuIGxjdVN2Y1NldHRpbmdzO1xyXG5cclxuICAgIC8vIHJldHVybiA8TENVU2VydmljZVNldHRpbmdzPntcclxuICAgIC8vICAgQVBJUm9vdDogd2luQW55LkxDVSAmJiB3aW5BbnkuTENVLkFQSVJvb3QgPyB3aW5BbnkuTENVLkFQSVJvb3QgOiAnJyxcclxuICAgIC8vICAgQXBwbGljYXRpb246IHtcclxuICAgIC8vICAgICBJRDogd2luQW55LkxDVSAmJiB3aW5BbnkuTENVLkFwcGxpY2F0aW9uICYmIHdpbkFueS5MQ1UuQXBwbGljYXRpb24uSUQgPyB3aW5BbnkuTENVLkFwcGxpY2F0aW9uLklEIDogJ3Rlc3QtYXBwJyxcclxuICAgIC8vICAgICBFbnRlcnByaXNlTG9va3VwOlxyXG4gICAgLy8gICAgICAgd2luQW55LkxDVSAmJiB3aW5BbnkuTENVLkFwcGxpY2F0aW9uLkVudGVycHJpc2VMb29rdXAgPyB3aW5BbnkuTENVLkFwcGxpY2F0aW9uLkVudGVycHJpc2VMb29rdXAgOiAndGVzdC1hcHAnXHJcbiAgICAvLyAgIH0sXHJcbiAgICAvLyAgIFN0YXRlOiB7XHJcbiAgICAvLyAgICAgRW52aXJvbm1lbnQ6d2luQW55LkxDVS5TdGF0ZS5FbnZpcm9ubWVudCA6ICcnLFxyXG4gICAgLy8gICAgIEFjdGlvblJvb3Q6IHdpbkFueS5MQ1UuU3RhdGUgPyB3aW5BbnkuTENVLlN0YXRlLlJvb3QgOiAnJyxcclxuICAgIC8vICAgICBSb290OiB3aW5BbnkuTENVLlN0YXRlID8gd2luQW55LkxDVS5TdGF0ZS5Sb290IDogJycsXHJcbiAgICAvLyAgICAgVXNlcm5hbWVNb2NrOiB3aW5BbnkuTENVLlN0YXRlID8gd2luQW55LkxDVS5TdGF0ZS5Vc2VybmFtZU1vY2sgOiAnJ1xyXG4gICAgLy8gICB9LFxyXG4gICAgLy8gICBTZXR0aW5nczogd2luQW55LkxDVS5TZXR0aW5nc1xyXG4gICAgLy8gfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RmF0aHltU2hhcmVkTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogRmF0aHltU2hhcmVkTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBSZWFsVGltZVNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXHJcbiAgICAgICAgICB1c2VDbGFzczogTENVSW50ZXJjZXB0b3IsXHJcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcclxuICAgICAgICAgIGRlcHM6IFtMQ1VTZXJ2aWNlU2V0dGluZ3NdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=