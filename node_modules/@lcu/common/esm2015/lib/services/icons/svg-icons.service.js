import { Injectable } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/material/icon";
/**
 * Registers custom svg icons to use with <mat-icon>
 *
 * <mat-icon color="primary" svgIcon="svgHome"></mat-icon>
 *
 * Can use material theme colors when SVG fill property is removed
 */
export class SvgIconsService {
    constructor(domSanitizer, matIconRegistry) {
        this.domSanitizer = domSanitizer;
        this.matIconRegistry = matIconRegistry;
    }
    /**
     *
     * @param icons List of svg icons
     * @param basePath base path to svg icons (/assets/svgs/etc.)
     */
    SetIcons(icons, basePath) {
        this.icons = icons;
        this.icons.forEach((icon) => {
            this.matIconRegistry.addSvgIcon(icon.Name, this.setPath(`${basePath}${icon.IconPath}`));
        });
    }
    /**
     * Return list of icons
     */
    GetIcons() {
        return this.icons;
    }
    /**
     * Register icon path
     *
     * @param url path to svg
     */
    setPath(url) {
        return this.domSanitizer.bypassSecurityTrustResourceUrl(url);
    }
}
SvgIconsService.ctorParameters = () => [
    { type: DomSanitizer },
    { type: MatIconRegistry }
];
SvgIconsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SvgIconsService_Factory() { return new SvgIconsService(i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.MatIconRegistry)); }, token: SvgIconsService, providedIn: "root" });
SvgIconsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SvgIconsService.ctorParameters = () => [
    { type: DomSanitizer },
    { type: MatIconRegistry }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb25zLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pY29ucy9zdmctaWNvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBTzFFOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBTzFCLFlBQ1ksWUFBMEIsRUFDMUIsZUFBZ0M7UUFEaEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQzNDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0csUUFBUSxDQUFDLEtBQTJCLEVBQUUsUUFBZ0I7UUFFM0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFtQixFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQzdCLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLE9BQU8sQ0FBQyxHQUFXO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7WUFsQ3VCLFlBQVk7WUFDVCxlQUFlOzs7O1lBckI3QyxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQUxRLFlBQVk7WUFEWixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgU1ZHSWNvbnNNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9pY29ucy9zdmctaWNvbnMubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBjdXN0b20gc3ZnIGljb25zIHRvIHVzZSB3aXRoIDxtYXQtaWNvbj5cclxuICpcclxuICogPG1hdC1pY29uIGNvbG9yPVwicHJpbWFyeVwiIHN2Z0ljb249XCJzdmdIb21lXCI+PC9tYXQtaWNvbj5cclxuICpcclxuICogQ2FuIHVzZSBtYXRlcmlhbCB0aGVtZSBjb2xvcnMgd2hlbiBTVkcgZmlsbCBwcm9wZXJ0eSBpcyByZW1vdmVkXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFN2Z0ljb25zU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIExpc3Qgb2YgaWNvbnNcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgaWNvbnM6IEFycmF5PFNWR0ljb25zTW9kZWw+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcixcclxuICAgIHByb3RlY3RlZCBtYXRJY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSkge1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICpcclxuICAgICogQHBhcmFtIGljb25zIExpc3Qgb2Ygc3ZnIGljb25zXHJcbiAgICAqIEBwYXJhbSBiYXNlUGF0aCBiYXNlIHBhdGggdG8gc3ZnIGljb25zICgvYXNzZXRzL3N2Z3MvZXRjLilcclxuICAgICovXHJcbiAgcHVibGljIFNldEljb25zKGljb25zOiBBcnJheTxTVkdJY29uc01vZGVsPiwgYmFzZVBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG5cclxuICAgIHRoaXMuaWNvbnMgPSBpY29ucztcclxuXHJcbiAgICB0aGlzLmljb25zLmZvckVhY2goKGljb246IFNWR0ljb25zTW9kZWwpID0+IHtcclxuICAgICAgdGhpcy5tYXRJY29uUmVnaXN0cnkuYWRkU3ZnSWNvbihcclxuICAgICAgICBpY29uLk5hbWUsXHJcbiAgICAgICAgdGhpcy5zZXRQYXRoKGAke2Jhc2VQYXRofSR7aWNvbi5JY29uUGF0aH1gKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybiBsaXN0IG9mIGljb25zXHJcbiAgICovXHJcbiAgcHVibGljIEdldEljb25zKCk6IEFycmF5PFNWR0ljb25zTW9kZWw+IHtcclxuICAgIHJldHVybiB0aGlzLmljb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgaWNvbiBwYXRoXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXJsIHBhdGggdG8gc3ZnXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHNldFBhdGgodXJsOiBzdHJpbmcpOiBTYWZlUmVzb3VyY2VVcmwgIHtcclxuICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwodXJsKTtcclxuICAgIH1cclxufVxyXG4iXX0=