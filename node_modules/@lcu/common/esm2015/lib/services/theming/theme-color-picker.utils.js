// https://ajonp.com/courses/angularmaterial/angular-material-theming/
import { OverlayContainer } from '@angular/cdk/overlay';
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class ThemeColorPickerService {
    constructor(overlayContainer) {
        this.overlayContainer = overlayContainer;
        this.initialClass = 'fathym-contrast-theme';
        this.colorClass = new BehaviorSubject(this.initialClass);
        const storageClass = localStorage.getItem('theme-picker');
        console.log('color picker service', storageClass);
        if (storageClass) {
            overlayContainer.getContainerElement().classList.add(storageClass);
            this.colorClass.next(storageClass);
        }
        else {
            overlayContainer.getContainerElement().classList.add(this.initialClass);
        }
    }
    GetColorClass() {
        return this.colorClass;
    }
    SetColorClass(className) {
        this.overlayContainer.getContainerElement().classList.forEach(css => {
            if (css !== 'cdk-overlay-container') {
                this.overlayContainer.getContainerElement().classList.remove(css);
            }
        });
        this.overlayContainer.getContainerElement().classList.add(className);
        this.colorClass.next(className);
        localStorage.setItem('theme-picker', className);
    }
}
ThemeColorPickerService.ctorParameters = () => [
    { type: OverlayContainer }
];
ThemeColorPickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThemeColorPickerService_Factory() { return new ThemeColorPickerService(i0.ɵɵinject(i1.OverlayContainer)); }, token: ThemeColorPickerService, providedIn: "root" });
ThemeColorPickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ThemeColorPickerService.ctorParameters = () => [
    { type: OverlayContainer }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtY29sb3ItcGlja2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGhlbWluZy90aGVtZS1jb2xvci1waWNrZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBTXZDLE1BQU0sT0FBTyx1QkFBdUI7SUFLaEMsWUFBc0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFFcEQsSUFBSSxDQUFDLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV6RCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsSUFBSSxZQUFZLEVBQUU7WUFDZCxnQkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDO0lBRU0sYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVNLGFBQWEsQ0FBQyxTQUFpQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xFLElBQUksR0FBRyxLQUFLLHVCQUF1QixFQUFFO2dCQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ25FO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7OztZQTdCdUMsZ0JBQWdCOzs7O1lBVDNELFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBTlEsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9ham9ucC5jb20vY291cnNlcy9hbmd1bGFybWF0ZXJpYWwvYW5ndWxhci1tYXRlcmlhbC10aGVtaW5nL1xyXG5cclxuaW1wb3J0IHsgT3ZlcmxheUNvbnRhaW5lciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRoZW1lQ29sb3JQaWNrZXJTZXJ2aWNlIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29sb3JDbGFzczogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz47XHJcbiAgICBwcm90ZWN0ZWQgaW5pdGlhbENsYXNzOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIG92ZXJsYXlDb250YWluZXI6IE92ZXJsYXlDb250YWluZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0aWFsQ2xhc3MgPSAnZmF0aHltLWNvbnRyYXN0LXRoZW1lJztcclxuICAgICAgICB0aGlzLmNvbG9yQ2xhc3MgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMuaW5pdGlhbENsYXNzKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcmFnZUNsYXNzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lLXBpY2tlcicpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb2xvciBwaWNrZXIgc2VydmljZScsIHN0b3JhZ2VDbGFzcyk7XHJcbiAgICAgICAgaWYgKHN0b3JhZ2VDbGFzcykge1xyXG4gICAgICAgICAgICBvdmVybGF5Q29udGFpbmVyLmdldENvbnRhaW5lckVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKHN0b3JhZ2VDbGFzcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3JDbGFzcy5uZXh0KHN0b3JhZ2VDbGFzcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3ZlcmxheUNvbnRhaW5lci5nZXRDb250YWluZXJFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0aGlzLmluaXRpYWxDbGFzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRDb2xvckNsYXNzKCk6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvckNsYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRDb2xvckNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5Q29udGFpbmVyLmdldENvbnRhaW5lckVsZW1lbnQoKS5jbGFzc0xpc3QuZm9yRWFjaChjc3MgPT4ge1xyXG4gICAgICAgICAgaWYgKGNzcyAhPT0gJ2Nkay1vdmVybGF5LWNvbnRhaW5lcicpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5Q29udGFpbmVyLmdldENvbnRhaW5lckVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKGNzcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMub3ZlcmxheUNvbnRhaW5lci5nZXRDb250YWluZXJFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgICAgIHRoaXMuY29sb3JDbGFzcy5uZXh0KGNsYXNzTmFtZSk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lLXBpY2tlcicsIGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuIl19