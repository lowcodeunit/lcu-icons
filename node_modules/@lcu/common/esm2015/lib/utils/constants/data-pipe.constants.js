// @dynamic
/**
 * @dynamic need this because there are static memebers
 *
 * String that represent the transformed format, used
 * with DataPipes.
 *
 * Ex.
 * // constants outside of a component need to be assigned
 * // to a local property in order to work
 *
 * const dateFmt: string = DataPipeConstants.DATE_FMT;
 * <span>{{ value | dataPipes:dateFmt }}</span>
 */
export class DataPipeConstants {
}
DataPipeConstants.DATE_FMT = 'dd/MMM/yyyy';
DataPipeConstants.DATE_SHORTDATE = 'M/d/yy';
DataPipeConstants.DATE_MEDIUMDATE = 'MMM d, y';
DataPipeConstants.DATE_FULLDATE = 'EEEE, MMMM d, y';
DataPipeConstants.DATE_TIME_FMT = `${DataPipeConstants.DATE_FMT} hh:mm:ss`;
DataPipeConstants.DATE_TIME_ZONE_FMT = 'MM/dd/yyyy hh:mm:ss a z';
DataPipeConstants.DATE_DAY_TIME = 'EEE h a';
DataPipeConstants.PIPE_DATE = 'date';
DataPipeConstants.PIPE_SHORTDATE = 'shortdate';
DataPipeConstants.PIPE_MEDIUMDATE = 'mediumdate';
DataPipeConstants.PIPE_FULLDATE = 'fulldate';
DataPipeConstants.PIPE_DECIMAL_TWO = 'decimalTwo';
DataPipeConstants.PIPE_DECIMAL_FOUR = 'decimalfour';
DataPipeConstants.PIPE_EPOCH = 'epoch';
DataPipeConstants.PIPE_NUMBER = 'number';
DataPipeConstants.PIPE_PERCENTAGE = 'percentage';
DataPipeConstants.PIPE_PERCENTAGE_DECIMAL = 'percentagedecimal';
DataPipeConstants.PIPE_TEMP_FAHRENHEIT = 'fahrenheit';
DataPipeConstants.PIPE_TEMP_CELSIUS = 'celsius';
DataPipeConstants.PIPE_TEMP_KELVIN = 'kelvin';
DataPipeConstants.PIPE_MPH = 'mph';
DataPipeConstants.PIPE_STRING_SLICE_FIFTY = 'slicefifty';
DataPipeConstants.PIPE_STRING_SLICE_SEVENTY = 'sliceseventy';
DataPipeConstants.PIPE_STRING_SLICE_HUNDRED = 'slicehundred';
DataPipeConstants.PIPE_PASSWORD = 'password';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1waXBlLmNvbnN0YW50cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2NvbnN0YW50cy9kYXRhLXBpcGUuY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVc7QUFDWDs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCxNQUFNLE9BQU8saUJBQWlCOztBQUVILDBCQUFRLEdBQUcsYUFBYSxDQUFDO0FBQ3pCLGdDQUFjLEdBQUcsUUFBUSxDQUFDO0FBQzFCLGlDQUFlLEdBQUcsVUFBVSxDQUFDO0FBQzdCLCtCQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDbEMsK0JBQWEsR0FBRyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsV0FBVyxDQUFDO0FBQ3pELG9DQUFrQixHQUFHLHlCQUF5QixDQUFDO0FBQy9DLCtCQUFhLEdBQUcsU0FBUyxDQUFDO0FBQzFCLDJCQUFTLEdBQUcsTUFBTSxDQUFDO0FBQ25CLGdDQUFjLEdBQUcsV0FBVyxDQUFDO0FBQzdCLGlDQUFlLEdBQUcsWUFBWSxDQUFDO0FBQy9CLCtCQUFhLEdBQUcsVUFBVSxDQUFDO0FBQzNCLGtDQUFnQixHQUFHLFlBQVksQ0FBQztBQUNoQyxtQ0FBaUIsR0FBRyxhQUFhLENBQUM7QUFDbEMsNEJBQVUsR0FBRyxPQUFPLENBQUM7QUFDckIsNkJBQVcsR0FBRyxRQUFRLENBQUM7QUFDdkIsaUNBQWUsR0FBRyxZQUFZLENBQUM7QUFDL0IseUNBQXVCLEdBQUcsbUJBQW1CLENBQUM7QUFDOUMsc0NBQW9CLEdBQUcsWUFBWSxDQUFDO0FBQ3BDLG1DQUFpQixHQUFHLFNBQVMsQ0FBQztBQUM5QixrQ0FBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsMEJBQVEsR0FBRyxLQUFLLENBQUM7QUFDakIseUNBQXVCLEdBQUcsWUFBWSxDQUFDO0FBQ3ZDLDJDQUF5QixHQUFHLGNBQWMsQ0FBQztBQUMzQywyQ0FBeUIsR0FBRyxjQUFjLENBQUM7QUFDM0MsK0JBQWEsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZHluYW1pY1xyXG4vKipcclxuICogQGR5bmFtaWMgbmVlZCB0aGlzIGJlY2F1c2UgdGhlcmUgYXJlIHN0YXRpYyBtZW1lYmVyc1xyXG4gKlxyXG4gKiBTdHJpbmcgdGhhdCByZXByZXNlbnQgdGhlIHRyYW5zZm9ybWVkIGZvcm1hdCwgdXNlZFxyXG4gKiB3aXRoIERhdGFQaXBlcy5cclxuICpcclxuICogRXguXHJcbiAqIC8vIGNvbnN0YW50cyBvdXRzaWRlIG9mIGEgY29tcG9uZW50IG5lZWQgdG8gYmUgYXNzaWduZWRcclxuICogLy8gdG8gYSBsb2NhbCBwcm9wZXJ0eSBpbiBvcmRlciB0byB3b3JrXHJcbiAqXHJcbiAqIGNvbnN0IGRhdGVGbXQ6IHN0cmluZyA9IERhdGFQaXBlQ29uc3RhbnRzLkRBVEVfRk1UO1xyXG4gKiA8c3Bhbj57eyB2YWx1ZSB8IGRhdGFQaXBlczpkYXRlRm10IH19PC9zcGFuPlxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhUGlwZUNvbnN0YW50cyB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBEQVRFX0ZNVCA9ICdkZC9NTU0veXl5eSc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERBVEVfU0hPUlREQVRFID0gJ00vZC95eSc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERBVEVfTUVESVVNREFURSA9ICdNTU0gZCwgeSc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERBVEVfRlVMTERBVEUgPSAnRUVFRSwgTU1NTSBkLCB5JztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREFURV9USU1FX0ZNVCA9IGAke0RhdGFQaXBlQ29uc3RhbnRzLkRBVEVfRk1UfSBoaDptbTpzc2A7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERBVEVfVElNRV9aT05FX0ZNVCA9ICdNTS9kZC95eXl5IGhoOm1tOnNzIGEgeic7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERBVEVfREFZX1RJTUUgPSAnRUVFIGggYSc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBJUEVfREFURSA9ICdkYXRlJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9TSE9SVERBVEUgPSAnc2hvcnRkYXRlJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9NRURJVU1EQVRFID0gJ21lZGl1bWRhdGUnO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX0ZVTExEQVRFID0gJ2Z1bGxkYXRlJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9ERUNJTUFMX1RXTyA9ICdkZWNpbWFsVHdvJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9ERUNJTUFMX0ZPVVIgPSAnZGVjaW1hbGZvdXInO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX0VQT0NIID0gJ2Vwb2NoJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9OVU1CRVIgPSAnbnVtYmVyJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9QRVJDRU5UQUdFID0gJ3BlcmNlbnRhZ2UnO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX1BFUkNFTlRBR0VfREVDSU1BTCA9ICdwZXJjZW50YWdlZGVjaW1hbCc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBJUEVfVEVNUF9GQUhSRU5IRUlUID0gJ2ZhaHJlbmhlaXQnO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX1RFTVBfQ0VMU0lVUyA9ICdjZWxzaXVzJztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9URU1QX0tFTFZJTiA9ICdrZWx2aW4nO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX01QSCA9ICdtcGgnO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX1NUUklOR19TTElDRV9GSUZUWSA9ICdzbGljZWZpZnR5JztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElQRV9TVFJJTkdfU0xJQ0VfU0VWRU5UWSA9ICdzbGljZXNldmVudHknO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQSVBFX1NUUklOR19TTElDRV9IVU5EUkVEID0gJ3NsaWNlaHVuZHJlZCc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBJUEVfUEFTU1dPUkQgPSAncGFzc3dvcmQnO1xyXG5cclxuXHJcblxyXG59XHJcbiJdfQ==