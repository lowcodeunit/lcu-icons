import { Pipe } from '@angular/core';
import { StringPipeConstants } from '../constants/string-pipe.constants';
/**
 * Pipes for string values
 */
export class StringPipes {
    transform(value, args) {
        if (!args) {
            return value;
        }
        /**
         * Return given string formatted as 'thisIsCamelCase'.
         *
         * For example, 'test-string' or 'Test String' would be converted to 'testString'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_CAMEL_CASE) {
            value = value.toString();
            return value.toLowerCase()
                .replace(/[^a-zA-Z0-9]+(.)/g, (_, chr) => chr.toUpperCase());
        }
        /**
         * Return given string formatted as 'this-is-kebab-case'.
         *
         * For example, 'TestString' would be converted to 'test-string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_KEBAB_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map((x) => x.toLowerCase())
                .join('-');
        }
        /**
         * Return given string formatted as 'ThisIsPascalCase'.
         *
         * For example, 'testString' would be converted to 'Teststring'.
         * For example, 'test string' would be converted to 'Test String'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_PASCAL_CASE) {
            return value.replace(/\w\S*/g, (m) => m.charAt(0).toUpperCase() + m.substr(1).toLowerCase());
        }
        /**
         * Return given string formatted as 'this_is_snake_case'.
         *
         * For example, 'TestString' would be converted to 'test_string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_SNAKE_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map((x) => x.toLowerCase())
                .join('_');
        }
        /**
         * If none of the above work, return the original value.
         */
        return value;
    }
}
StringPipes.decorators = [
    { type: Pipe, args: [{
                name: 'stringPipes'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLnBpcGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbHMvcGlwZXMvc3RyaW5nLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBTXpFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFDdEIsU0FBUyxDQUFDLEtBQVUsRUFBRSxJQUFVO1FBQzlCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQ7Ozs7V0FJRztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLG1CQUFtQixDQUFDLGVBQWUsRUFBRTtZQUM5RCxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLFdBQVcsRUFBRTtpQkFDYixPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMxRjtRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQ7Ozs7O1dBS0c7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUN0RztRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQ7O1dBRUc7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQTVERixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7YUFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlVHJhbnNmb3JtLCBQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0cmluZ1BpcGVDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMvc3RyaW5nLXBpcGUuY29uc3RhbnRzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc3RyaW5nUGlwZXMnXHJcbn0pXHJcblxyXG4vKipcclxuICogUGlwZXMgZm9yIHN0cmluZyB2YWx1ZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdQaXBlcyBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBhcmdzPzogYW55KTogYW55IHtcclxuICAgIGlmICghYXJncykge1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZ2l2ZW4gc3RyaW5nIGZvcm1hdHRlZCBhcyAndGhpc0lzQ2FtZWxDYXNlJy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ3Rlc3Qtc3RyaW5nJyBvciAnVGVzdCBTdHJpbmcnIHdvdWxkIGJlIGNvbnZlcnRlZCB0byAndGVzdFN0cmluZycuXHJcbiAgICAgKi9cclxuICAgIGlmIChhcmdzLnRvTG93ZXJDYXNlKCkgPT09IFN0cmluZ1BpcGVDb25zdGFudHMuUElQRV9DQU1FTF9DQVNFKSB7XHJcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aMC05XSsoLikvZywgKF86IHN0cmluZywgY2hyOiBzdHJpbmcpID0+IGNoci50b1VwcGVyQ2FzZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBnaXZlbiBzdHJpbmcgZm9ybWF0dGVkIGFzICd0aGlzLWlzLWtlYmFiLWNhc2UnLlxyXG4gICAgICpcclxuICAgICAqIEZvciBleGFtcGxlLCAnVGVzdFN0cmluZycgd291bGQgYmUgY29udmVydGVkIHRvICd0ZXN0LXN0cmluZycuXHJcbiAgICAgKi9cclxuICAgIGlmIChhcmdzLnRvTG93ZXJDYXNlKCkgPT09IFN0cmluZ1BpcGVDb25zdGFudHMuUElQRV9LRUJBQl9DQVNFKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZS5tYXRjaCgvW0EtWl17Mix9KD89W0EtWl1bYS16XStbMC05XSp8XFxiKXxbQS1aXT9bYS16XStbMC05XSp8W0EtWl18WzAtOV0rL2cpXHJcbiAgICAgICAgICAgICAgICAgIC5tYXAoKHg6IHN0cmluZykgPT4geC50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICAgICAgICAgICAgICAuam9pbignLScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGdpdmVuIHN0cmluZyBmb3JtYXR0ZWQgYXMgJ1RoaXNJc1Bhc2NhbENhc2UnLlxyXG4gICAgICpcclxuICAgICAqIEZvciBleGFtcGxlLCAndGVzdFN0cmluZycgd291bGQgYmUgY29udmVydGVkIHRvICdUZXN0c3RyaW5nJy5cclxuICAgICAqIEZvciBleGFtcGxlLCAndGVzdCBzdHJpbmcnIHdvdWxkIGJlIGNvbnZlcnRlZCB0byAnVGVzdCBTdHJpbmcnLlxyXG4gICAgICovXHJcbiAgICBpZiAoYXJncy50b0xvd2VyQ2FzZSgpID09PSBTdHJpbmdQaXBlQ29uc3RhbnRzLlBJUEVfUEFTQ0FMX0NBU0UpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcd1xcUyovZywgKG06IHN0cmluZykgPT4gbS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG0uc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGdpdmVuIHN0cmluZyBmb3JtYXR0ZWQgYXMgJ3RoaXNfaXNfc25ha2VfY2FzZScuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGUsICdUZXN0U3RyaW5nJyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gJ3Rlc3Rfc3RyaW5nJy5cclxuICAgICAqL1xyXG4gICAgaWYgKGFyZ3MudG9Mb3dlckNhc2UoKSA9PT0gU3RyaW5nUGlwZUNvbnN0YW50cy5QSVBFX1NOQUtFX0NBU0UpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlLm1hdGNoKC9bQS1aXXsyLH0oPz1bQS1aXVthLXpdK1swLTldKnxcXGIpfFtBLVpdP1thLXpdK1swLTldKnxbQS1aXXxbMC05XSsvZylcclxuICAgICAgICAgICAgICAgICAgLm1hcCgoeDogc3RyaW5nKSA9PiB4LnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgICAgICAgICAgIC5qb2luKCdfJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBub25lIG9mIHRoZSBhYm92ZSB3b3JrLCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==