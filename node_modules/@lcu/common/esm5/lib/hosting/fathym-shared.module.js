import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LCUInterceptor } from '../api/daf/lcu.interceptor';
import { RealTimeService } from '../api/real-time/real-time.service';
import { LCUServiceSettings, } from '../api/lcu-service-settings';
import { SafePipe } from '../pipes/safe-pipe';
export var winAny = window;
var FathymSharedModule = /** @class */ (function () {
    function FathymSharedModule() {
    }
    //  Fields
    //  API Methods
    FathymSharedModule.DefaultServiceSettings = function (env, apiRoot) {
        var lcuSvcSettings = winAny.LCU;
        lcuSvcSettings.APIRoot = lcuSvcSettings.APIRoot || apiRoot || '';
        lcuSvcSettings.Application =
            lcuSvcSettings.Application || {};
        lcuSvcSettings.Application.EnterpriseLookup =
            lcuSvcSettings.Application.EnterpriseLookup || 'test-app';
        lcuSvcSettings.Application.ID = lcuSvcSettings.Application.ID || 'test-app';
        lcuSvcSettings.State = lcuSvcSettings.State || {};
        lcuSvcSettings.Settings = lcuSvcSettings.Settings || {};
        return lcuSvcSettings;
        // return <LCUServiceSettings>{
        //   APIRoot: winAny.LCU && winAny.LCU.APIRoot ? winAny.LCU.APIRoot : '',
        //   Application: {
        //     ID: winAny.LCU && winAny.LCU.Application && winAny.LCU.Application.ID ? winAny.LCU.Application.ID : 'test-app',
        //     EnterpriseLookup:
        //       winAny.LCU && winAny.LCU.Application.EnterpriseLookup ? winAny.LCU.Application.EnterpriseLookup : 'test-app'
        //   },
        //   State: {
        //     Environment:winAny.LCU.State.Environment : '',
        //     ActionRoot: winAny.LCU.State ? winAny.LCU.State.Root : '',
        //     Root: winAny.LCU.State ? winAny.LCU.State.Root : '',
        //     UsernameMock: winAny.LCU.State ? winAny.LCU.State.UsernameMock : ''
        //   },
        //   Settings: winAny.LCU.Settings
        // };
    };
    FathymSharedModule.forRoot = function () {
        return {
            ngModule: FathymSharedModule,
            providers: [
                RealTimeService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: LCUInterceptor,
                    multi: true,
                    deps: [LCUServiceSettings],
                },
            ],
        };
    };
    FathymSharedModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SafePipe],
                    imports: [CommonModule, FormsModule, HttpClientModule, RouterModule],
                    exports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        RouterModule,
                        SafePipe,
                    ],
                    providers: [],
                    entryComponents: [],
                },] }
    ];
    return FathymSharedModule;
}());
export { FathymSharedModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF0aHltLXNoYXJlZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9ob3N0aW5nL2ZhdGh5bS1zaGFyZWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JFLE9BQU8sRUFFTCxrQkFBa0IsR0FHbkIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFOUMsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQztBQUVsQztJQUFBO0lBc0VBLENBQUM7SUF4REMsVUFBVTtJQUVWLGVBQWU7SUFDUix5Q0FBc0IsR0FBN0IsVUFDRSxHQUE0QixFQUM1QixPQUFnQjtRQUVoQixJQUFNLGNBQWMsR0FBdUIsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUV0RCxjQUFjLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLElBQUksT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUVqRSxjQUFjLENBQUMsV0FBVztZQUN4QixjQUFjLENBQUMsV0FBVyxJQUEwQixFQUFHLENBQUM7UUFFMUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0I7WUFDekMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxVQUFVLENBQUM7UUFFNUQsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksVUFBVSxDQUFDO1FBRTVFLGNBQWMsQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssSUFBb0IsRUFBRyxDQUFDO1FBRW5FLGNBQWMsQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLFFBQVEsSUFBdUIsRUFBRyxDQUFDO1FBRTVFLE9BQU8sY0FBYyxDQUFDO1FBRXRCLCtCQUErQjtRQUMvQix5RUFBeUU7UUFDekUsbUJBQW1CO1FBQ25CLHNIQUFzSDtRQUN0SCx3QkFBd0I7UUFDeEIscUhBQXFIO1FBQ3JILE9BQU87UUFDUCxhQUFhO1FBQ2IscURBQXFEO1FBQ3JELGlFQUFpRTtRQUNqRSwyREFBMkQ7UUFDM0QsMEVBQTBFO1FBQzFFLE9BQU87UUFDUCxrQ0FBa0M7UUFDbEMsS0FBSztJQUNQLENBQUM7SUFFTSwwQkFBTyxHQUFkO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNULGVBQWU7Z0JBQ2Y7b0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLEtBQUssRUFBRSxJQUFJO29CQUNYLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDO2lCQUMzQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXJFRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDO29CQUN4QixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFlBQVksQ0FBQztvQkFDcEUsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxnQkFBZ0I7d0JBQ2hCLFlBQVk7d0JBQ1osUUFBUTtxQkFDVDtvQkFDRCxTQUFTLEVBQUUsRUFBRTtvQkFDYixlQUFlLEVBQUUsRUFBRTtpQkFDcEI7O0lBMERELHlCQUFDO0NBQUEsQUF0RUQsSUFzRUM7U0F6RFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUsIEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgTENVSW50ZXJjZXB0b3IgfSBmcm9tICcuLi9hcGkvZGFmL2xjdS5pbnRlcmNlcHRvcic7XHJcbmltcG9ydCB7IFJlYWxUaW1lU2VydmljZSB9IGZyb20gJy4uL2FwaS9yZWFsLXRpbWUvcmVhbC10aW1lLnNlcnZpY2UnO1xyXG5pbXBvcnQge1xyXG4gIExDVUFwcGxpY2F0aW9uQ29uZmlnLFxyXG4gIExDVVNlcnZpY2VTZXR0aW5ncyxcclxuICBMQ1VTZXR0aW5nc0NvbmZpZyxcclxuICBMQ1VTdGF0ZUNvbmZpZyxcclxufSBmcm9tICcuLi9hcGkvbGN1LXNlcnZpY2Utc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBTYWZlUGlwZSB9IGZyb20gJy4uL3BpcGVzL3NhZmUtcGlwZSc7XHJcblxyXG5leHBvcnQgY29uc3Qgd2luQW55ID0gPGFueT53aW5kb3c7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1NhZmVQaXBlXSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgSHR0cENsaWVudE1vZHVsZSwgUm91dGVyTW9kdWxlXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIEh0dHBDbGllbnRNb2R1bGUsXHJcbiAgICBSb3V0ZXJNb2R1bGUsXHJcbiAgICBTYWZlUGlwZSxcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW10sXHJcbiAgZW50cnlDb21wb25lbnRzOiBbXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhdGh5bVNoYXJlZE1vZHVsZSB7XHJcbiAgLy8gIEZpZWxkc1xyXG5cclxuICAvLyAgQVBJIE1ldGhvZHNcclxuICBzdGF0aWMgRGVmYXVsdFNlcnZpY2VTZXR0aW5ncyhcclxuICAgIGVudjogeyBwcm9kdWN0aW9uOiBib29sZWFuIH0sXHJcbiAgICBhcGlSb290Pzogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICBjb25zdCBsY3VTdmNTZXR0aW5ncyA9IDxMQ1VTZXJ2aWNlU2V0dGluZ3M+d2luQW55LkxDVTtcclxuXHJcbiAgICBsY3VTdmNTZXR0aW5ncy5BUElSb290ID0gbGN1U3ZjU2V0dGluZ3MuQVBJUm9vdCB8fCBhcGlSb290IHx8ICcnO1xyXG5cclxuICAgIGxjdVN2Y1NldHRpbmdzLkFwcGxpY2F0aW9uID1cclxuICAgICAgbGN1U3ZjU2V0dGluZ3MuQXBwbGljYXRpb24gfHwgPExDVUFwcGxpY2F0aW9uQ29uZmlnPnsgfTtcclxuXHJcbiAgICBsY3VTdmNTZXR0aW5ncy5BcHBsaWNhdGlvbi5FbnRlcnByaXNlTG9va3VwID1cclxuICAgICAgbGN1U3ZjU2V0dGluZ3MuQXBwbGljYXRpb24uRW50ZXJwcmlzZUxvb2t1cCB8fCAndGVzdC1hcHAnO1xyXG5cclxuICAgIGxjdVN2Y1NldHRpbmdzLkFwcGxpY2F0aW9uLklEID0gbGN1U3ZjU2V0dGluZ3MuQXBwbGljYXRpb24uSUQgfHwgJ3Rlc3QtYXBwJztcclxuXHJcbiAgICBsY3VTdmNTZXR0aW5ncy5TdGF0ZSA9IGxjdVN2Y1NldHRpbmdzLlN0YXRlIHx8IDxMQ1VTdGF0ZUNvbmZpZz57IH07XHJcblxyXG4gICAgbGN1U3ZjU2V0dGluZ3MuU2V0dGluZ3MgPSBsY3VTdmNTZXR0aW5ncy5TZXR0aW5ncyB8fCA8TENVU2V0dGluZ3NDb25maWc+eyB9O1xyXG5cclxuICAgIHJldHVybiBsY3VTdmNTZXR0aW5ncztcclxuXHJcbiAgICAvLyByZXR1cm4gPExDVVNlcnZpY2VTZXR0aW5ncz57XHJcbiAgICAvLyAgIEFQSVJvb3Q6IHdpbkFueS5MQ1UgJiYgd2luQW55LkxDVS5BUElSb290ID8gd2luQW55LkxDVS5BUElSb290IDogJycsXHJcbiAgICAvLyAgIEFwcGxpY2F0aW9uOiB7XHJcbiAgICAvLyAgICAgSUQ6IHdpbkFueS5MQ1UgJiYgd2luQW55LkxDVS5BcHBsaWNhdGlvbiAmJiB3aW5BbnkuTENVLkFwcGxpY2F0aW9uLklEID8gd2luQW55LkxDVS5BcHBsaWNhdGlvbi5JRCA6ICd0ZXN0LWFwcCcsXHJcbiAgICAvLyAgICAgRW50ZXJwcmlzZUxvb2t1cDpcclxuICAgIC8vICAgICAgIHdpbkFueS5MQ1UgJiYgd2luQW55LkxDVS5BcHBsaWNhdGlvbi5FbnRlcnByaXNlTG9va3VwID8gd2luQW55LkxDVS5BcHBsaWNhdGlvbi5FbnRlcnByaXNlTG9va3VwIDogJ3Rlc3QtYXBwJ1xyXG4gICAgLy8gICB9LFxyXG4gICAgLy8gICBTdGF0ZToge1xyXG4gICAgLy8gICAgIEVudmlyb25tZW50OndpbkFueS5MQ1UuU3RhdGUuRW52aXJvbm1lbnQgOiAnJyxcclxuICAgIC8vICAgICBBY3Rpb25Sb290OiB3aW5BbnkuTENVLlN0YXRlID8gd2luQW55LkxDVS5TdGF0ZS5Sb290IDogJycsXHJcbiAgICAvLyAgICAgUm9vdDogd2luQW55LkxDVS5TdGF0ZSA/IHdpbkFueS5MQ1UuU3RhdGUuUm9vdCA6ICcnLFxyXG4gICAgLy8gICAgIFVzZXJuYW1lTW9jazogd2luQW55LkxDVS5TdGF0ZSA/IHdpbkFueS5MQ1UuU3RhdGUuVXNlcm5hbWVNb2NrIDogJydcclxuICAgIC8vICAgfSxcclxuICAgIC8vICAgU2V0dGluZ3M6IHdpbkFueS5MQ1UuU2V0dGluZ3NcclxuICAgIC8vIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEZhdGh5bVNoYXJlZE1vZHVsZT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IEZhdGh5bVNoYXJlZE1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgUmVhbFRpbWVTZXJ2aWNlLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgICAgICAgdXNlQ2xhc3M6IExDVUludGVyY2VwdG9yLFxyXG4gICAgICAgICAgbXVsdGk6IHRydWUsXHJcbiAgICAgICAgICBkZXBzOiBbTENVU2VydmljZVNldHRpbmdzXSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19