import { __assign, __awaiter, __extends, __generator } from "tslib";
import { ObservableContextService } from '../api/observable-context/observable-context.service';
import { Subject, BehaviorSubject, } from 'rxjs';
import { RealTimeConnection } from './../api/real-time/real-time.connection';
import { LCUServiceSettings } from '../api/lcu-service-settings';
import { HttpClient } from '@angular/common/http';
//  TODO:  Need to manage reconnection to hub scenarios here
var StateContext = /** @class */ (function (_super) {
    __extends(StateContext, _super);
    //  Constructors
    function StateContext(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.connectedToState = new BehaviorSubject({
            Code: -1,
            Message: 'Initialized',
        });
        _this.ConnectedToState = _this.connectedToState.asObservable();
        _this.http = injector.get(HttpClient);
        _this.ReconnectionAttempt = new Subject();
        _this.Settings = injector.get(LCUServiceSettings);
        var rtUrl = _this.buildHubUrl('');
        var actionUrl = _this.loadActionUrl('');
        _this.rt = new RealTimeConnection(_this.http, rtUrl, actionUrl);
        _this.rt.ReconnectionAttempt.subscribe(function (val) {
            _this.ReconnectionAttempt.next(val);
        });
        _this.setup();
        return _this;
    }
    //  API Methods
    StateContext.prototype.Execute = function (action) {
        return this.executeAction(action);
    };
    StateContext.prototype.$Refresh = function (args) {
        if (args === void 0) { args = {}; }
        this.Execute({
            Arguments: args,
            Type: 'Refresh',
        });
    };
    StateContext.prototype.Start = function (shouldUpdate) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.startSub) {
                    this.startSub = this.rt.Started.subscribe(function () { return __awaiter(_this, void 0, void 0, function () {
                        var groupName;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.connectToState(shouldUpdate)];
                                case 1:
                                    groupName = _a.sent();
                                    this.setupReceiveState(groupName);
                                    this.connectedToState.next({ Code: 0, Message: 'Success' });
                                    this.callRefresh();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    this.rt.Start();
                }
                return [2 /*return*/];
            });
        });
    };
    //  Helpers
    StateContext.prototype.buildActionUrl = function (urlRoot) {
        var url = this.loadActionUrl(urlRoot);
        return url;
    };
    StateContext.prototype.buildHubUrl = function (urlRoot) {
        var url = this.loadHubUrl(urlRoot);
        return url;
    };
    StateContext.prototype.callRefresh = function () {
        this.$Refresh();
    };
    StateContext.prototype.connectToState = function (shouldUpdate) {
        return __awaiter(this, void 0, void 0, function () {
            var stateKey, stateName, env;
            var _this = this;
            return __generator(this, function (_a) {
                stateKey = this.loadStateKey();
                stateName = this.loadStateName();
                env = this.loadEnvironment();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.rt
                            .InvokeAction('ConnectToState', _this.loadHeaders(), {
                            ShouldSend: shouldUpdate,
                            Key: stateKey,
                            State: stateName,
                            Environment: env,
                        })
                            .subscribe({
                            next: function (req) {
                                if ((req.body.status && req.body.status.code === 0) || (req.body.Status && req.body.Status.Code === 0)) {
                                    resolve(req.body.groupName);
                                }
                                else {
                                    reject(req.body.status
                                        ? req.body.status.message
                                        : 'Unknown issue connecting to state.');
                                }
                            },
                            error: function (err) { return reject(err); },
                        });
                    })];
            });
        });
    };
    StateContext.prototype.defaultValue = function () {
        return {};
    };
    StateContext.prototype.executeAction = function (action) {
        return __awaiter(this, void 0, void 0, function () {
            var stateKey, stateName;
            var _this = this;
            return __generator(this, function (_a) {
                stateKey = this.loadStateKey();
                stateName = this.loadStateName();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        return _this.rt
                            .InvokeAction(action.Type, _this.loadHeaders(), __assign(__assign({}, action), { Key: stateKey, State: stateName }))
                            .subscribe({
                            next: function (req) {
                                resolve(req);
                            },
                            error: function (err) { return reject(err); }
                        });
                    })];
            });
        });
    };
    StateContext.prototype.loadActionPath = function () {
        var actionRoot = this.loadStateActionRoot();
        return "" + actionRoot; // ?lcu-app-id=${this.Settings.AppConfig.ID}&lcu-app-ent-lookup=${this.Settings.AppConfig.EnterpriseLookup}`;
    };
    StateContext.prototype.loadActionUrl = function (urlRoot) {
        var apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        var actionPath = this.loadActionPath();
        return "" + apiRoot + (urlRoot || '') + actionPath;
    };
    StateContext.prototype.loadEnvironment = function () {
        var env = this.Settings.State
            ? this.Settings.State.Environment
            : null;
        if (!env) {
            env = '';
        }
        return env;
    };
    StateContext.prototype.loadHeaders = function () {
        return {
            'lcu-ent-lookup': this.Settings.Application.EnterpriseLookup,
            'lcu-hub-name': this.loadStateName(),
            'lcu-state-key': this.loadStateKey(),
            'lcu-environment': this.loadEnvironment(),
            'lcu-username-mock': this.loadUsernameMock(),
        };
    };
    StateContext.prototype.loadHubPath = function () {
        var stateRoot = this.loadStateRoot();
        var env = this.loadEnvironment();
        var unmock = this.loadUsernameMock();
        return stateRoot + "?lcu-app-ent-lookup=" + this.Settings.Application.EnterpriseLookup + "&lcu-environment=" + env + "&lcu-username-mock=" + unmock;
    };
    StateContext.prototype.loadHubUrl = function (urlRoot) {
        var apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        var hubPath = this.loadHubPath();
        return "" + apiRoot + (urlRoot || '') + hubPath;
    };
    StateContext.prototype.loadStateRoot = function () {
        var stateRoot = this.Settings.State && this.Settings.State.Root !== undefined
            ? this.Settings.State.Root
            : '';
        return stateRoot + "/" + this.loadStateName();
    };
    StateContext.prototype.loadStateActionRoot = function () {
        var stateActinRoot = this.Settings.State &&
            this.Settings.State.ActionRoot !== undefined
            ? this.Settings.State.ActionRoot
            : '';
        return stateActinRoot + "/" + this.loadStateName();
    };
    StateContext.prototype.loadUsernameMock = function () {
        return this.Settings.State && this.Settings.State.UsernameMock
            ? this.Settings.State.UsernameMock
            : '';
    };
    StateContext.prototype.setup = function () {
        this.Start(false).then();
    };
    StateContext.prototype.setupReceiveState = function (groupName) {
        var _this = this;
        this.rt.RegisterHandler("ReceiveState=>" + groupName).subscribe(function (req) {
            console.log("Handled state from " + groupName);
            _this.subject.next(req);
        });
    };
    return StateContext;
}(ObservableContextService));
export { StateContext };
//# sourceMappingURL=data:application/json;base64,