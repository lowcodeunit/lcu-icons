import { Pipe } from '@angular/core';
import { DatePipe, DecimalPipe, PercentPipe } from '@angular/common';
import { DataPipeConstants } from '../constants/data-pipe.constants';
import { TemperatureConversion } from '../conversion/temperature.conversion';
import { TimezoneConversion } from '../conversion/timezone.conversion';
var DataPipes = /** @class */ (function () {
    function DataPipes() {
    }
    DataPipes.prototype.transform = function (val, arg) {
        if (!arg) {
            return val;
        }
        var format = arg.toLowerCase();
        /**
         * Return date M/d/YYYY
         */
        if (format === DataPipeConstants.PIPE_SHORTDATE) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val, DataPipeConstants.DATE_SHORTDATE);
            return transformed;
        }
        /**
         * Return date
         */
        if (format === DataPipeConstants.PIPE_DATE.toLowerCase()) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val, DataPipeConstants.DATE_FMT);
            return transformed;
        }
        /**
         * Return date MMM d, y
         */
        if (format === DataPipeConstants.PIPE_MEDIUMDATE.toLowerCase()) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val, 'MMM d, y');
            return transformed;
        }
        /**
         * Return date 'EEEE, MMMM d, y'
         */
        if (format === DataPipeConstants.PIPE_FULLDATE.toLowerCase()) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val, DataPipeConstants.DATE_FULLDATE);
            return transformed;
        }
        /**
         * Return MM/dd/yyyy hh:mm:ss a z
         */
        if (format === DataPipeConstants.DATE_TIME_ZONE_FMT.toLowerCase()) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val, DataPipeConstants.DATE_TIME_ZONE_FMT);
            var splittedString_1 = transformed.toString().split(' ');
            splittedString_1[splittedString_1.length - 1] = TimezoneConversion.GMTTimezoneConversion(splittedString_1[splittedString_1.length - 1]);
            var newDateString_1 = '';
            splittedString_1.forEach(function (st) {
                if (splittedString_1.indexOf(st) < splittedString_1.length - 1) {
                    newDateString_1 += st + ' ';
                }
                else {
                    newDateString_1 += st;
                }
            });
            return newDateString_1;
        }
        /**
         * Return date from epoch val
         */
        if (format === DataPipeConstants.PIPE_EPOCH.toLowerCase()) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(val * 1000, DataPipeConstants.DATE_DAY_TIME);
            return transformed;
        }
        /**
         * Return number with decimal
         */
        if (format === DataPipeConstants.PIPE_NUMBER.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(val, '1.0-0');
            return transformed;
        }
        /**
         * Return return number with mph appended
         */
        if (format === DataPipeConstants.PIPE_MPH.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(val, '1.0-0');
            return transformed + ' mph';
        }
        /**
         * Return percentage
         */
        if (format === DataPipeConstants.PIPE_PERCENTAGE.toLowerCase()) {
            var pipe = new PercentPipe('en-US');
            var transformed = pipe.transform(val);
            return transformed;
        }
        /**
         * Return percentage
         */
        if (format === DataPipeConstants.PIPE_PERCENTAGE_DECIMAL.toLowerCase()) {
            var pipe = new PercentPipe('en-US');
            var transformed = pipe.transform(val, '2.2-2');
            return transformed;
        }
        /**
         * Return percentage with two decimals
         */
        if (format === DataPipeConstants.PIPE_DECIMAL_TWO.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(val, '1.2-2');
            return transformed;
        }
        /**
         * Return percentage with four decimals
         */
        if (format === DataPipeConstants.PIPE_DECIMAL_FOUR.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(val, '1.4-4');
            return transformed;
        }
        /**
         * Return temperature in fahrenheit, append °F
         */
        if (format === DataPipeConstants.PIPE_TEMP_FAHRENHEIT.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            // const temperature = (val * 32) + 1.8;
            var transformed = pipe.transform(val, '1.0-0');
            return transformed + ' °F';
        }
        /**
         * Return temperature in kelvin, append °K
         */
        if (format === DataPipeConstants.PIPE_TEMP_KELVIN.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            // const temperature = (val * 32) + 1.8;
            var temperature = TemperatureConversion.FahrenheitToKelvin(val);
            var transformed = pipe.transform(temperature, '1.0-0');
            return transformed + ' °K';
        }
        /**
         * Return temperature in celsius, append °C
         */
        if (format === DataPipeConstants.PIPE_TEMP_CELSIUS.toLowerCase()) {
            var pipe = new DecimalPipe('en-US');
            var temperature = TemperatureConversion.FahrenheitToCelsius(val);
            var transformed = pipe.transform(temperature, '1.0-0');
            return transformed + ' °C';
        }
        /**
         * retrun the string sliced down to 50
         */
        if (format === DataPipeConstants.PIPE_STRING_SLICE_FIFTY.toLowerCase()) {
            return val.slice(0, 50) + '...';
        }
        /**
         * retrun the string sliced down to 70
         */
        if (format === DataPipeConstants.PIPE_STRING_SLICE_SEVENTY.toLowerCase()) {
            return val.slice(0, 70) + '...';
        }
        /**
         * retrun the string sliced down to 100
         */
        if (format === DataPipeConstants.PIPE_STRING_SLICE_HUNDRED.toLowerCase()) {
            return val.slice(0, 100) + '...';
        }
        /**
         * Return password visibility
         */
        if (format === DataPipeConstants.PIPE_PASSWORD.toLowerCase()) {
            return '•'.repeat(val.length);
        }
        /**
         * IF none of the above work, return the original val
         */
        return val;
    };
    DataPipes.decorators = [
        { type: Pipe, args: [{
                    name: 'dataPipes'
                },] }
    ];
    return DataPipes;
}());
export { DataPipes };
//# sourceMappingURL=data:application/json;base64,