import { Pipe } from '@angular/core';
import { StringPipeConstants } from '../constants/string-pipe.constants';
var StringPipes = /** @class */ (function () {
    function StringPipes() {
    }
    StringPipes.prototype.transform = function (value, args) {
        if (!args) {
            return value;
        }
        /**
         * Return given string formatted as 'thisIsCamelCase'.
         *
         * For example, 'test-string' or 'Test String' would be converted to 'testString'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_CAMEL_CASE) {
            value = value.toString();
            return value.toLowerCase()
                .replace(/[^a-zA-Z0-9]+(.)/g, function (_, chr) { return chr.toUpperCase(); });
        }
        /**
         * Return given string formatted as 'this-is-kebab-case'.
         *
         * For example, 'TestString' would be converted to 'test-string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_KEBAB_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map(function (x) { return x.toLowerCase(); })
                .join('-');
        }
        /**
         * Return given string formatted as 'ThisIsPascalCase'.
         *
         * For example, 'testString' would be converted to 'Teststring'.
         * For example, 'test string' would be converted to 'Test String'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_PASCAL_CASE) {
            return value.replace(/\w\S*/g, function (m) { return m.charAt(0).toUpperCase() + m.substr(1).toLowerCase(); });
        }
        /**
         * Return given string formatted as 'this_is_snake_case'.
         *
         * For example, 'TestString' would be converted to 'test_string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_SNAKE_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map(function (x) { return x.toLowerCase(); })
                .join('_');
        }
        /**
         * If none of the above work, return the original value.
         */
        return value;
    };
    StringPipes.decorators = [
        { type: Pipe, args: [{
                    name: 'stringPipes'
                },] }
    ];
    return StringPipes;
}());
export { StringPipes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLnBpcGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbHMvcGlwZXMvc3RyaW5nLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXpFO0lBQUE7SUE2REEsQ0FBQztJQXJEQywrQkFBUyxHQUFULFVBQVUsS0FBVSxFQUFFLElBQVU7UUFDOUIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRDs7OztXQUlHO1FBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssbUJBQW1CLENBQUMsZUFBZSxFQUFFO1lBQzlELEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDekIsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFO2lCQUNiLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxVQUFDLENBQVMsRUFBRSxHQUFXLElBQUssT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztTQUMxRjtRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFFRDs7Ozs7V0FLRztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFO1lBQy9ELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQXJELENBQXFELENBQUMsQ0FBQztTQUN0RztRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFFRDs7V0FFRztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBNURGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsYUFBYTtpQkFDcEI7O0lBMkRELGtCQUFDO0NBQUEsQUE3REQsSUE2REM7U0F0RFksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RyaW5nUGlwZUNvbnN0YW50cyB9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJpbmctcGlwZS5jb25zdGFudHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdzdHJpbmdQaXBlcydcclxufSlcclxuXHJcbi8qKlxyXG4gKiBQaXBlcyBmb3Igc3RyaW5nIHZhbHVlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cmluZ1BpcGVzIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGFyZ3M/OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFhcmdzKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBnaXZlbiBzdHJpbmcgZm9ybWF0dGVkIGFzICd0aGlzSXNDYW1lbENhc2UnLlxyXG4gICAgICpcclxuICAgICAqIEZvciBleGFtcGxlLCAndGVzdC1zdHJpbmcnIG9yICdUZXN0IFN0cmluZycgd291bGQgYmUgY29udmVydGVkIHRvICd0ZXN0U3RyaW5nJy5cclxuICAgICAqL1xyXG4gICAgaWYgKGFyZ3MudG9Mb3dlckNhc2UoKSA9PT0gU3RyaW5nUGlwZUNvbnN0YW50cy5QSVBFX0NBTUVMX0NBU0UpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW15hLXpBLVowLTldKyguKS9nLCAoXzogc3RyaW5nLCBjaHI6IHN0cmluZykgPT4gY2hyLnRvVXBwZXJDYXNlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGdpdmVuIHN0cmluZyBmb3JtYXR0ZWQgYXMgJ3RoaXMtaXMta2ViYWItY2FzZScuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGUsICdUZXN0U3RyaW5nJyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gJ3Rlc3Qtc3RyaW5nJy5cclxuICAgICAqL1xyXG4gICAgaWYgKGFyZ3MudG9Mb3dlckNhc2UoKSA9PT0gU3RyaW5nUGlwZUNvbnN0YW50cy5QSVBFX0tFQkFCX0NBU0UpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlLm1hdGNoKC9bQS1aXXsyLH0oPz1bQS1aXVthLXpdK1swLTldKnxcXGIpfFtBLVpdP1thLXpdK1swLTldKnxbQS1aXXxbMC05XSsvZylcclxuICAgICAgICAgICAgICAgICAgLm1hcCgoeDogc3RyaW5nKSA9PiB4LnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgICAgICAgICAgIC5qb2luKCctJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZ2l2ZW4gc3RyaW5nIGZvcm1hdHRlZCBhcyAnVGhpc0lzUGFzY2FsQ2FzZScuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGUsICd0ZXN0U3RyaW5nJyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gJ1Rlc3RzdHJpbmcnLlxyXG4gICAgICogRm9yIGV4YW1wbGUsICd0ZXN0IHN0cmluZycgd291bGQgYmUgY29udmVydGVkIHRvICdUZXN0IFN0cmluZycuXHJcbiAgICAgKi9cclxuICAgIGlmIChhcmdzLnRvTG93ZXJDYXNlKCkgPT09IFN0cmluZ1BpcGVDb25zdGFudHMuUElQRV9QQVNDQUxfQ0FTRSkge1xyXG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXFx3XFxTKi9nLCAobTogc3RyaW5nKSA9PiBtLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbS5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZ2l2ZW4gc3RyaW5nIGZvcm1hdHRlZCBhcyAndGhpc19pc19zbmFrZV9jYXNlJy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ1Rlc3RTdHJpbmcnIHdvdWxkIGJlIGNvbnZlcnRlZCB0byAndGVzdF9zdHJpbmcnLlxyXG4gICAgICovXHJcbiAgICBpZiAoYXJncy50b0xvd2VyQ2FzZSgpID09PSBTdHJpbmdQaXBlQ29uc3RhbnRzLlBJUEVfU05BS0VfQ0FTRSkge1xyXG4gICAgICByZXR1cm4gdmFsdWUubWF0Y2goL1tBLVpdezIsfSg/PVtBLVpdW2Etel0rWzAtOV0qfFxcYil8W0EtWl0/W2Etel0rWzAtOV0qfFtBLVpdfFswLTldKy9nKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKCh4OiBzdHJpbmcpID0+IHgudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAgICAgICAgICAgLmpvaW4oJ18nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElmIG5vbmUgb2YgdGhlIGFib3ZlIHdvcmssIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcbn1cclxuIl19